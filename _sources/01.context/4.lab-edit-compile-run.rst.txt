.. index:: Visual Studio Code, VS Code
   labs; VS Code


.. _lab-edit-compile-run:

Lab 1: Environment Setup & "hello, world"
===========================================================================

Our goals for this lab include:

#. To setup the development tools needed for C# programming.
#. To create your first .NET project for C# development using VS Code.
#. To create a C# "hello, world" app using the terminal.



Install VS Code, .NET SDK, and C# Dev Kit Extension 
----------------------------------------------------


#. Install VS Code: 

   Visit the Visual Studio Code `website <https://code.visualstudio.com/>`_ site or use a package manager 
   to install the current version of VS Code for your operating system. [#]_ An `online version <https://vscode.dev>`_ of VS Code is also available. 

#. Install .NET SDK: 
   
   Visit the `.NET page <https://code.visualstudio.com/docs/languages/dotnet>`_ and scroll down to click on 
   the "Install the .NET SDK" button. You will be redirected to the 
   `.NET Download <https://dotnet.microsoft.com/en-us/download>`_ page, with the OS, architect, and the recent 
   long term support version of .NET SDK pre-seleted for you to start downlaoding.   
   The download page also includes instructions for the installation and verification of the SDK. 
   At the end of the installation, you should see a notification that the .NET SDK, along with 
   .NET runtime, ASP.NET Core Runtime, and .NET Windows Desktop Runtime are installed.  
  
   .. figure:: ../images/dotnet_sdk_installation.jpg
      :scale: 25% 
 
 To verify if .NET SDK is installed correctly, open a new terminal (e.g., PowerShell in Windows or Terminal in 
 macOS) and run the ``dotnet`` command by type ``dotnet`` and then hit the Enter key. If .NET is correctly 
 installed, you should see results as below. 

 .. figure:: ../images/dotnet_install_verification.jpg
    :scale: 25% 

    Outcome of running the ``dotnet`` command in terminal

3. Install the C# Dev Kit extension:
  
   Click on the the Extension view icon on the Activity Bar, search and install the C# Dev Kit (this should 
   also install the C# extension from Microsoft). 



.. index: VS Code, solution, project   

.. _steps:

Create C# Projects
----------------------------------

#.  Follow the following steps at the terminal to prepare the environment for learning C#:
   
    .. note:: You can perform this task using your computer's GUI but this is an important practice, especially if you are new to the terminal/shell. 
  
    #. Start your terminal application. By default, you would be in your user home directory with a command prompt.   
    #. Issue the command ``pwd`` to show your present work path to make sure you are in your user home directory. 
    #. Issue the ``ls`` command and enter to see what files and directories are in the directory.
    #. Create a directory called "workspace" (``mkdir workspace``). ### you may add this folder to the "Trusted Folders & Workspaces" later when prompted by VS Code.
    #. Change directory into the workspace directory (``cd workspace``).
    #. Inside workspace, create a directory ist_1551 (``mkdir ist_1551``)
    #. Inside workspace, create another directory called tests (``mkdir tests``)
    #. ``ls`` to make sure that you have two directories created: ist_1551 and tests.
    #. Change directory up one level (``cd ..``) or just ``cd ~`` to go back to the your user home directory.
    #. Use the ``exit`` command to leave the terminal.   

    The process should look like this:

    .. code-block:: bash

        tychen@mac:~$
        tychen@mac:~$ pwd
        /Users/tychen
        tychen@mac:~$ mkdir workspace
        tychen@mac:~$ cd workspace
        tychen@mac:~/workspace$ mkdir ist_1551
        tychen@mac:~/workspace$ mkdir tests
        tychen@mac:~/workspace$ ls
        ist_1551 tests
        tychen@mac:~/workspace$ cd ..
        tychen@mac:~$ exit
            

#.  Start VS Code 

    There are two ways to start VS Code: 
 
    #. In the terminal, ``cd`` into the folder ("workspace" in this example) that 
       you want to work on and type ``code`` to start VS Code with the folder as 
       the working directory shown in the Explorer view. 
    #. Open VS Code by clicking on the app icon.   

    .. note::     
        A VS Code workspace/folder has a ``settings.json`` file in the ``.vscode`` directory for you to 
        further configure the project. Also, checking out the VS Code docs to `get started <https://code.visualstudio.com/docs>`_ with the 
        first steps of learning how to use VS Code. 


#.  Create a C# Hello World app project (hello1)

    The .NET platform uses *solutions* and *projects* to organize code items in specific structure.
    A solution is a container for one or more projects, and each project would contain source code files. 
    You are encouraged to create a *single solution for this course*, with all the projects that you create 
    in the solution [#]_ but we will first create a test project to practice that. We start by creating a *solution* with a *project* in it. The images are from
    a Mac but Windows versions should look similar.

    We will create our first "hello, world" app in the "tests" folder in your 
    "workspace" folder by going through the following steps: 
    
    #. In a newly opened VS Code window (File --> New Window if you are using 
       VS Code for some other tasks), choose "Create .NET Project" from the Explorer 
       view and choose "Console App" from the Command Pallette. Alternatively, 
       Cmd-Shift-P or Win-Shift-P to bring up Command Pallette and then type .NET: 
       New Project, then select "Console App" as your project template. 

    #. Choose the project directory. In our example here, choose the *tests* directory
       that we created in the workspace directory under the user home directory.  
    
    #. Choose a name for your project. In this example, type hello1 as the project name
       and Enter to confirm the project path. You should see the hello1 project created 
       along with a test.sln solution file. 

       .. figure:: ../images/hello1_project_created.jpg
        :scale: 30%

    #. Click to expand the hello1 project directory and you should see the Program.cs 
       file. Click to open the file in the editor. 

       .. figure:: ../images/hello1_program_cs.jpg
        :scale: 30%
       
    #. To run the hello1 app, you have to run it as part of a project. From the 
       menu bar, choose Run --> Run without Debugging. Alternatively, you can run 
       the app by choosing the "Run project associated with this file" option from 
       the Run Code icon (the â–· right-pointing triangle in the upper right corner 
       of the editor menu bar). 

       When run successfully, you should see the building process and the 
       code execution result prein the TERMINAL panel:

       .. code-block:: bash

        tychen@mac:~/workspace/tests$  /Users/tychen/.vscode/extensions/
        ms-dotnettools.csharp-2.39.29-darwin-x64/.debugger/x86_64/vsdbg 
        --interpreter=vscode --connection=/var/folders/6t/bfp06fh96wn60n_mjtxmbhfm0000gn/T/
        CoreFxPipe_vsdbg-ui-3e9ba55f636d4549b58b7e6499b27762 
        Hello, World!

       .. figure:: ../images/hello1_world.jpg
            :scale: 35%
       



       .. note::   

        If you click on Run Code triangle, you may see an error message in the 
        OUTPUT panel: 

            .. code-block:: bash

                [Running] scriptcs "/Users/tychen/workspace/tests/hello1/Program.cs"
                /bin/sh: scriptcs: command not found

                [Done] exited with code=127 in 0.017 seconds
       
#. Create another C# Hello World app project (hello2)
   
   Here you will create another project, call it hello2, to output "Hello, World" at 
   the command line. But this time we are going to do that by issuing commands at 
   the command line instead of using VS Code as the tool. The process should look as 
   the code block below. We first create (``mkdir``) another project folder called hello2 in the 
   solution folder tests, then ``cd`` into the folder and issued two dotnet commands 
   to create the app. 

   You can either start your terminal app and change into workspace to perform the 
   following tasks; or you may use the TERMINAL panel in VS Code.


   .. code-block:: bash

    tychen@mac:~/workspace/tests$ ls
    hello1    tests.sln
    tychen@mac:~/workspace/tests$ mkdir hello2
    tychen@mac:~/workspace/tests$ ls
    hello1    hello2    tests.sln
    tychen@mac:~/workspace/tests$ cd hello2
    tychen@mac:~/workspace/tests/hello2$ ls
    tychen@mac:~/workspace/tests/hello2$ dotnet new console
    The template "Console App" was created successfully.
    
    Processing post-creation actions...
    Restoring /Users/tychen/workspace/tests/hello2/hello2.csproj:
      Determining projects to restore...
      Restored /Users/tychen/workspace/tests/hello2/hello2.csproj (in 145 ms).
    Restore succeeded.
    
    tychen@mac:~/workspace/tests/hello2$ dotnet run
    Hello, World!
    tychen@mac:~/workspace/tests/hello2$ 
   

As you can see, the outcome of running project hello2 is the same as project 
hello1. 
          
    


.. [#] Visual Studio requires a solution file in order to be run. Although a solution is not required for projects, it offer some benefts such as project configuration and building all projects at once. 
.. [#] For reasons such as handling versions, managing dependencies, and uninstallation, it is suggested that, when possible, you should use a package manager when installing software applications. Common used package managers incluce, e.g., `Homebrew <https://brew.sh/>`_ for macOS, `Chocolatey <https://chocolatey.org/>`_ for Windows, and apt/snap for Ubuntu Linux.
