.. _io:

Combining Input and Output
==========================

.. index:: 
   double: Console; ReadLine
   
.. _read-from-console:
   
Reading from the Keyboard
--------------------------

If you want users to type something at the keyboard, you should let them know first!
The jargon for this is to give them a *prompt*:  Instructions written to the screen,
something like ::

    Console.Write("Enter your name: ");
    
Then the user should respond.
What the user types is automatically shown (*echoed*)
in the terminal or console window.  For a program to 
read what is typed, another function in the ``Console`` class is used:
``Console.ReadLine``.

Here the data for the function comes from a line typed at the keyboard by the user,
so there is no need for a parameter between
the parentheses: ``Console.ReadLine()``.  
The resulting sequence of characters,
typed before the user presses the Enter (Return) key,
form the string *value* of the function.
Syntactically in C#, 
when a function with a value is used, it is an *expression* in the
program, and the 
expression evaluation is the value produced by the function. 
This is the same as in normal use of functions in math.

With any function producing a value,
the value is *lost* unless it is *immediately* used.  
Often this is done by immediately assigning the value to a variable like in ::

    string name;
    name = Console.ReadLine();

or in the shorter ::

    string name = Console.ReadLine();

.. index:: Console; ReadKey
   ReadKey
   
Fine point:  Notice that in most operating systems you can edit and correct your line
before pressing the Return key.  This is handy, 
but it means that the Return key *must* always be pressed to signal the end
of the response.  
Hence a whole line must be read, and there is *no* function ``Console.Read()``.  
Just for completeness we mention that you can read a raw single keystroke immediately
(no editing beforehand).  If you want to explore that later, see  
:repsrc:`test_readkey/test_readkey.cs`. 
     

.. index::
   string; Parse to int or double
   Parse int and double
   int; Parse
   double; Parse
   
.. _Numbers-and-Digit-Strings:

Numbers and Strings of Digits
-----------------------------

You may well want to have the user supply you with numbers.
There is a complication.  Suppose you want to get numbers and add them.
What happens with this code, in :repsrc:`bad_sum/bad_sum.cs`?

.. literalinclude:: ../../examples/introcs/bad_sum/bad_sum.cs

Here is a sample run:

.. code-block:: none

    Enter an integer: 23
    Enter another integer: 9
    They add up to 239

C# has a type for everything and 
``Console.ReadLine()`` gives you a string.  
Adding strings with ``+`` is not the same as adding numbers!

We must explicitly convert the strings to the proper kind of number.
There are functions to do that:  ``int.Parse`` takes a string parameter
that should be the characters in an ``int``, like "123" or "-25", and 
produces the corresponding ``int`` value, like 123 or -25.
In :repsrc:`good_sum/good_sum.cs`, we changed the names to emphasize the type
conversions:

.. literalinclude:: ../../examples/introcs/good_sum/good_sum.cs

Notice that the values calculated by ``int.Parse`` for the strings
``xString`` and ``yString`` are immediately remembered in 
assignment statements.  Be careful of the distinction here.
The ``int.Parse`` function does not magically *change*
the variable ``xString`` into an ``int``:  the string ``xString`` is unchanged, 
but the corresponding ``int`` value is calculated, 
and gets assigned to an ``int`` variable, ``x``.  


Note that this would not work if the string represents the wrong kind of number,
but there is an alternative:

.. code-block:: none

    csharp> string s = "34.5";
    csharp> int.Parse(s);
    System.FormatException: Input string was not in the correct format ....
    csharp> double.Parse(s);
    34.5

We omitted the long tail of the error message.  
There is no decimal point in an ``int``.
You see the fix with the corresponding function that returns a double.

Example Projects and the Source Repository 
--------------------------------------------

We have started to refer to whole programs that we have written.  You will
want to have your own copies to test and modify for related work.

All of our examples are set up in a Xamarin Studio solution in our 
`zip file that you can download <https://github.com/tychen742/introcs-csharp-examples/archive/master.zip>`_.

The zip file and the folder it unzips to have the long name 
introcs-csharp-examples-master.  We suggest you *rename the folder* simply
``examples`` to match the name of the Xamarin Studio solution it contains.  

There are various way to access our files.  

#. One way is to look at individual files from your download
   under our examples directory.  
#. If you open the examples solution in Xamarin Studio, 
   you can select files from the Solutions pad. 
   (Instructions are in the next section.)
#. In the notes we refer to individual code file names that are hyperlinked.
   They link to the *latest version* in our online source repository.
   You get a display of color-coded web page with numbered lines.  If you
   want to adapt a chunk, you can select it, and copy.
   If you want to copy all of a large file, your editing shortcuts
   for Select All do *not* work:  You get a bunch of extra html.
   An alternative is to click the **Raw** button in the web page 
   to the left above the source code.
   That brings up a plain text page with just the code.  
   You can either download it or select all of it, and you
   *only* get the code.

We have one main convention in naming our projects:  Most projects are
examples of full, functional programs to run.  Others are intended to be
copied by you as *stubs* for your solutions, for you to elaborate.  
These project folders all end with
"_stub", like ``string_manip_stub``.  Even the stubs can be compiled 
immediately, though they may not accomplish anything.

.. index:: chunk in source comments

A further convention is using "chunk" comments inside example source files:  
To keep the book and the source code in sync, our 
`Sphinx <http://sphinx-doc.org/>`_
building routine directly uses excerpts from 
the exact source code that is in the
examples download.  We have to mark the limits of the excerpts that we want
for the book.
Our convention is to have a comment referring to the beginning or the
end of an excerpt "chunk".      
Hence a comment including "chunk" in a source file is
*not* intended as commentary on the code, but merely a marker for 
automatically regenerating a revision of the book. 

.. _our-md-projects:

Running our Xamarin Studio Examples Solution
-----------------------------------------------

If you are just starting Xamarin Studio, and you have *not* run our solution before:

#.  Make sure you have downloaded and unzipped our  
    `examples <https://github.com/tychen742/introcs-csharp-examples/archive/master.zip>`_.
    You get a folder with a mouythfull of a name :file:`introcs-csharp-examples-master`.  We will
    assume you reduce the name of the folder to the much shorter :file:`examples`.
#.  On the Xamarin Studio Welcome screen select the button Open....
#.  You get an open-file dialog.  Navigate to our :file:`examples` solution.
#.  Select :file:`examples/examples.sln`.  The sln is short for solution.

The next time you come to the Welcome screen, our examples should be listed in the
Recent Projects, and you can click to open it directly.

Copying and Modifying Our Example Xamarin Studio Projects
----------------------------------------------------------------

We strongly encourage you *not* to modify our examples in place, if you want
to keep the changes, because we will make additions and modifications to 
our source download, and we would not want you to overwrite any of
your modified files after downloading a later version of the examples.


If you do want to alter our code, we suggest you copy it to a project in your
solution ("work", discussed in the first lab in the :ref:`steps`).

#. Open your solution.
#. Create a new project, maybe with the same name as the one we had.  If it was a
   "_stub" project, remove the "_stub" from your project's name.
#. In the Solution Pad open the menu on your new project
   (*not* the whole solution), select, Add, and then in the
   further submenu, select Add Files....
#. This brings up an operating system open-file dialog.  Switch folders into our
   example projects.  Select the files you want to copy.  
   (It makes things easier if you put the examples folder 
   in the same parent folder as your work folder.)
#. A further dialog window pops up, with the choice **Copy** selected.
   Click to approve copy (as opposed to move or link).  
#. Now the desired files should appear in your project, 
   along with the unfortunate default Program.cs.  If you have not already 
   deleted Program.cs, as described in :ref:`steps`, do it now.
#. If you intended to copy everything for a project, test by running the project.
   Even our stub projects should compile, though a stub project may not do anything
   when you run it until you add your own code to it.  To make successful incremental
   additions, it is always good to start from something that compiles!

When creating modifications of previous examples, like the exercise below,
you can often save time by copying in the related example, particularly avoiding
retyping the standard boiler plate code at the top.  However, when you are first
learning and getting used to new syntax, typing reinforces learning.
Perhaps after looking over the related example, you are encouraged to write your 
version *from scratch*, to get used to all the parts of the code.  Later, when 
you can produce such text automatically, feel free to switch to just
copying from a place that you had it before.


.. _InterviewProblem:

Interview Exercise/Example
~~~~~~~~~~~~~~~~~~~~~~~~~~

Write a program that prompts the user for a name (like Elliot)  and a time
(like 10AM) and prints out a sentence like:  

.. code-block:: none 

   Elliot has an interview at 10AM.

If you are having a hard time and want a further example, 
or want to compare to your work,
see our solution, :repsrc:`interview/interview.cs`.

.. _AdditionProblem:

Exercise for Addition
~~~~~~~~~~~~~~~~~~~~~~

Write a version, :file:`add3.cs`, that
prompts the user for three numbers, *not necessarily integers*, 
and lists all three, and their sum, in
similar format to :repsrc:`good_sum/good_sum.cs`.

.. _QuotientProblem:

Exercise for Quotients
~~~~~~~~~~~~~~~~~~~~~~~

Write a program, ``quotient.cs``, that
prompts the user for two integers, and then prints them out in a
sentence with an integer division problem like 

.. code-block:: none

   The quotient of 14 and 3 is 4 with a remainder of 2.

Review :ref:`Division-and-Remainders` if you forget the integer
division or remainder operator.



.. _substitution-in-writeline:

Substitutions in Console.WriteLine
==================================

Output With ``+``
-----------------

An elaboration of a "Hello, World" program, could greet the user,
after obtaining the user's name.  If the user enters the name
Elliot, the program could print 

    Hello, Elliot!

This is a very simple
input-process-output program (in fact with almost no "process").
Think how would you code it. 

You need to obtain a name, remember it and use it in your output.
A solution is in the next section.


.. index::
   WriteLine; { } for format
   single: { } ; Format 

.. _Format-Strings:

String Format Operation
-----------------------

A common convention is fill-in-the blanks. For instance,

    Hello, _____!

and you can fill in the name of the person greeted, and combine
given text with a chosen insertion. C# has a similar
construction, better called fill-in-the-braces,
that can be used with ``Console.WriteLine``.

Instead of inserting user input with the ``+`` operation as in 
:repsrc:`hello_you1/hello_you1.cs`:

.. literalinclude:: ../../examples/introcs/hello_you1/hello_you1.cs

look at a variation, :repsrc:`hello_you2/hello_you2.cs`, shown below.
Both programs  
look exactly the same to the user:

.. literalinclude:: ../../examples/introcs/hello_you2/hello_you2.cs

All the new syntax is in the line::

   Console.WriteLine ("Hello, {0}!", name);

``Console.WriteLine`` actually can take parameters *after* an initial string,
but only when  the string is in the form of a *format string*,
with expression(s) in braces where substitutions are to be made,
(like in fill-in-the-blanks). Here the format string is ``"Hello, {0}!"``. 

The remaining parameters, after the initial string, 
give the values to be substituted.  To
know *which* further parameter to substitute, the parameters after the
initial string are implicitly numbered,
*starting from 0*.  
Starting with 0 is consistent with other numbering sequences in C#.
So here, where there is just one value to substitute (``name``), it gets the index 0,
and where it is substituted, the braces get 0 inside, to indicate
that parameter with index 0 is to be substituted.

Everything in the initial string that is *outside* the braces is just
*repeated verbatim*.  In particular, if the only parameter is a string 
with no braces, it is printed completely
verbatim (reducing to the situations where we have used ``Console.WriteLine`` before).

A more elaborate silly examples that you could test in csharp would be::

    string first = "Peter";
    string last = "Piper";
    string what = "pick";
    Console.WriteLine("{0} {1}, {0} {1}, {2}.", first, last, what);
    
It would print::

    Peter Piper, Peter Piper, pick.
    
where parameter 0 is ``first`` (value ``"Peter"``), 
parameter 1 is ``last`` ( value ``"Piper"``), and
parameter 2 is ``what`` (value ``"pick"``).  

Make sure you see why the given output is exactly what is printed.

Or try in csharp::

    int x = 7;
    int y = 5;
    Console.WriteLine("{0} plus {1} is {2}; {0} times {1} is {3}.", x, y, x+y, x*y);
    
and see it print:

.. code-block:: none

    7 plus 5 is 12; 7 times 5 is 35.
    
Note the following features of the parameters after the first string:

- These parameters can be any expression, 
  and the expressions get evaluated before printing.
- These parameters to be substituted can be of any type. 
- These parameters are automatically converted to a string form, just as in the
  use of the string ``+`` operation.  
  
In fact the simple use of format strings
shown so far can be completed replaced by long expressions with ``+``,
if that is your taste.  We later discusses fancier formatting in :ref:`tables`,
that *cannot* be duplicated with a simple string ``+`` operation.
We will use the simple numbered substitutions for now just  
to get used to the idea of substitution.

.. index:: format; literal {}
    
A technical point: Since braces have special meaning in a format
string, there must be a special rule if you want braces to actually
be included in the final *formatted* string. The rule is to double
the braces: ``"{{"`` and ``"}}"``. The fragment ::

    int a = 2, b = 3;
    Console.WriteLine("The set is {{{0}, {1}}}.", a, b);

produces

.. code-block:: none

    The set is {2, 3}.

Note:  Braces only get their special meaning if there are at least two
parameters (forcing the first parameter to be a format string).
If there is just a single parameter, 
braces are interpreted as regular characters.

Format Reading Exercise
~~~~~~~~~~~~~~~~~~~~~~~~~~

What is printed?  ::

        Console.WriteLine("{0}{1}{1}{2}", "Mi", "ssi", "ppi");
        
Check yourself.
   
.. _QuotientFormat:

Exercise for Format
~~~~~~~~~~~~~~~~~~~~~~~

Write a program, ``quotient_format.cs``, that behaves like
:ref:`QuotientProblem`, but generate the sentence using 
``Console.WriteLine`` with a format string and no ``+`` operator.


Madlib Exercise 
~~~~~~~~~~~~~~~~~~~~~~~

Write a program, ``my_mad_lib.cs``, that prompts the user for
words that fit specified gramatical patterns ( a noun, a verb, a color,
a city....) and plug them into a multiline format string so they fit
grammatically, and
print the usually silly result.  
If you are not used to mad libs, try running (not 
looking at the source code) the example project mad_lib, and then try it 
again with different data.
If this exercise seems like too big of a challenge yet,
see our example source code, 
:repsrc:`mad_lib/mad_lib.cs`, and then *start over* on your own.


.. index:: method; overloading
   overloading; methods

.. _overloading:

Overloading
-------------

The ``WriteLine`` function can take parameters in different ways:

- It can take a single parameter of an type (and print its string representation).
- It can take a string parameter followed by any number of parameters used to 
  substitute into the initial format string.
- It can take no parameters, and just advance to the next line (not used yet in
  this book).
  
Though each of these uses has the same name, ``Console.WriteLine``, 
they are technically all different functions:  A function is not just recognized
by its name, but by its *signature*, 
which includes the name **and** the number and types of parameters.
The technical term for using the same name with different signatures for different
functions is *overloading* the function (or method).

This only makes practical sense for a group of closely related functions, where the
use of the same name is more helpful than confusing.



.. index:: 
   double: Console; WriteLine
   

.. _write-to-console:
   
Writing to the Console
======================
   
In interactive use of csharp, you can type an
expression and immediately see the result of its evaluation. This
is fine to test out syntax and maybe do simple calculator
calculations. In a regular C# program run from a file like in
:ref:`sample-program`, 
you must explicitly give instructions to print to a 
console or terminal window.  This will be a window like you see
when running csharp.  

This printing is accomplished through a function with a long name: ``Console.WriteLine``.
Like with math, you can pass a function a value to work on, by placing it in
parentheses after the name of the function.  Unlike in high school algebra classes,
in C# we have many types of data to supply other than numbers.  The simplest
way to use the ``Console.WriteLine`` function is to give it a string.   
We can demonstrate in csharp.  The response is just the line that would
be printed in a regular program:

.. index:: . ; class static member

.. code-block:: none

    csharp> Console.WriteLine("Hello, world!");
    Hello, world!

What is printed to the screen does *not* have the quotes which we needed to
define the literal string ``"Hello, world!"`` inside the program.

``Console`` is a C# class maintained by the system, that
interacts with the terminal or console window where text output 
appears for the program.  A function defined in that class is ``WriteLine``.
To refer to a function like ``WriteLine`` in a different class, you must indicate
the location of the function with the "dot" notation shown:
class name, then ``.``, then the function.  This  
gives the more elaborate name needed in the program.

The string that gets printed can be the result of evaluating an expression, 
for instance concatenating:


.. code-block:: none

    csharp> int total = 5;
    csharp> Console.WriteLine("All together: " + total);
    All together: 5

More elaborate use of ``WriteLine`` is discussed in :ref:`Format-Strings`.

.. index:: Console; Write

The ``Console.WriteLine`` function automatically makes the printing
position advance to the next line, as when you press the Enter or Return key.
A variant, ``Console.Write``, prints the parameter exactly, and nothing else.
The statement-at-a-time approach in csharp is not good for illustrating the 
differences.

Printing is better shown off in a real program....
