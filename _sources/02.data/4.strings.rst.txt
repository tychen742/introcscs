
Strings, Part I
===============

Enough with numbers for a while. Strings of characters are another
important type in C#.

.. index:: string
   single: "..." for string literal

A string in C# is a sequence of characters. For C# to
recognize a literal sequence of characters, like ``hello``, as a string, it
must be enclosed in quotes ``"`` to delimit the string: ``"hello"``.  
Special cases are considered later in :ref:`strings2`.


.. index:: string; concatenation with +
   concatenation
   single: +; string concatenation
   operator; + string concatenation

.. _String-Concatenation:
   
String Concatenation
--------------------
   
Because everything in C# is typed, C# can give a special meaning to
operators depending on the types involved,
as we saw with ``/``.
We can operate on numbers with arithmetic operators, including ``+``.
With strings ``+`` has a completely different meaning. Look at the example
in csharp:

.. code-block:: none

    csharp> "never" + "ending";
    "neverending"

The plus operation with strings means *concatenate* the strings: join them
together end to end.

C# is even a bit smarter.  If you use a ``+`` with a string, presumable you
are looking to produce a string, so even if the second operand to the ``+`` is
*not* a string, it is automatically converted to a string representation before
concatenating:

.. code-block:: none

    csharp> int x = 42;
    csharp> string result;
    csharp> result = "We get " + x;
    csharp> result;
    "We get 42"

You can chain concatenations.  We could make a full sentence adding a period:

.. code-block:: none

    csharp> "We get " + x + ".";
    "We get 42."

Note to Python programmers:  Unfortunately there is no ``*`` 
multiplication operator for strings in C#.
 
Four Copies Exercise
~~~~~~~~~~~~~~~~~~~~~~
In csharp declare and initialize a string variable.  Write an expression that
evaluates to four copies of the string, so it works no matter what value you
gave your string.

..  dump, like Conrad said
    Thirty-two Copies Exercise
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    This is an extension of the previous exercise, except with 32 copies,
    but do not do it with one long
    expression.  Include some extra short *assignment statements* in the middle, 
    to shorten the overall 
    writing.  Hint:  32 was chosen since you can reach it by repeated *doubling*.
    To repeatedly double, you must save the result after each intermediate doubling.

Sum String Exercise
~~~~~~~~~~~~~~~~~~~~~~

In csharp declare and initialize two int's, x and y.  Then enter an expression whose
value is "x + y is 56", except that 56 is replaced by the sum of x and y, and is not
a literal, but calculated from the actual values of variables x and y (which do not
need to add up to 56 specifically).

This has a trick to it.

Ints and Strings Added
~~~~~~~~~~~~~~~~~~~~~~

In csharp enter  ::

   int x = 2;
   int y = 3;
   
*Think* what the csharp response 
is to each of these then write one predicted response at a time, 
*then* test it,
and put the right answer beside your answer if you were wrong::

   x + "??" + y;
   x + y + "??";
   (x * y + "??"); 
   "??" + x * y;
   "??" + x + y;
   x + "??" * y;
   
Can you explain the ones you got wrong, after looking at the actual answer?
Precedence and operation order is important.




.. _Strings2:
   
String Special Cases
======================

.. index::
   escape code \
   single: \ ; character escape code
   character escape code \
   
There are some special cases for creating literal strings.  
For instance you might want quotes
as characters inside your string.  In this case you need special 
symbolism using a character *escape code*, starting with  ``\`` backslash.
Then the character after the backslash has a special meaning.

For instance a quote character after a backslash, ``\"``,
does not mean the end of a string literal.  It means a quote character
is literally used *in* the string:  ``"He said, \"Hello!\", over and over."``

We can illustrate with csharp, first with a simple string:

.. code-block:: none

    csharp> Console.WriteLine("Hello world!");
    Hello world!
    csharp> Console.WriteLine("He said, \"Hello!\", over and over.");
    He said, "Hello!", over and over.

There are many other special cases of escape code.  The main ones
you are likely to use are:

+-------------+---------------------------------------+
| Escape code | Meaning                               |
+=============+=======================================+
| ``\"``      | ``"`` (quote)                         |
+-------------+---------------------------------------+
| ``\'``      | ``'`` ( single quote in char literal) |
+-------------+---------------------------------------+
| ``\\``      | ``\`` (backslash)                     |
+-------------+---------------------------------------+
| ``\n``      | newline                               |
+-------------+---------------------------------------+

Hence if you really want a backslash character in a literal, 
you need to write two of them.

The newline character indicates further text will appear on the next line down
when *printed* with the ``Console.WriteLine`` function.  

Example:

.. code-block:: none

    csharp> Console.WriteLine("Windows path: c:\\Users\\aharrin");
    Windows path: c:\Users\aharrin
    csharp> Console.WriteLine("a\nbc\n\ndef")
    a
    bc
    
    def
    
.. index::
   string; @
   @ string literal
   verbatim string with @

Literal strings that are simply delimited by quotes ``"`` 
must start and end on the same line. 
There is also a notation for *\ @-quoting*, with an at-sign ``@`` before the first
quote.  In an @-quoted string, all characters are treated verbatim, including
all backslashes.  Also the string may go on for several lines, and all newlines
are included literally.  (The csharp program does not recognize 
multi-line @-quoted strings.)
This fragment in a program would produce the same output as the statements in
the csharp example above::

           Console.WriteLine(@"Windows path: c:\Users\aharrin");
           Console.WriteLine(@"a
    bc
    
    def");
    
The only thing this example does not show off well is the amount of
left margin indentation.
That is significant in a multiline @-quoted string.  
A whole simple program with this code is in example 
:repsrc:`at_sign_strings/at_sign_strings.cs`.

.. index:: csharp; verbatim string display
  
Caution:  When you give csharp an expression evaluating to a string at the
prompt, you get back a verbatim string with *quotes added around it*, 
but no ``@`` to remind you that it is verbatim:

.. code-block:: none

    csharp> "Windows path: c:\\Users\\aharrin"
    "Windows path: c:\Users\aharrin"
    csharp> "a\nbc\n\ndef"
    "a
    bc
    
    def"

Multiline String Exercise
~~~~~~~~~~~~~~~~~~~~~~~~~~~

a.  Write a statement that initializes a string ``s`` with a **single**
    string literal that, when printed, shows something on one line then three 
    empty lines, and then a final line with text.
b.  Declare the same string with a different string literal expression, that
    produces the same string.  (Just one of your literals should start
    with ``@``.)
